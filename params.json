{"name":"Google-proto-simple-stream-reader-writer","tagline":"a helper for use of Google protocol buffers on the web (javascript and java)","body":"###is a Java and Javascript library to read and write <em>Google protocol buffers</em> in the browser, on the server side, and in non-web clients.  The project also contains a small demo Google app-engine application that streams protocol buffer messages to clients, including a web client.\r\n\r\n(Note, the project may need to be updated occasionally for the latest appengine apis.)\r\n\r\n    To build:\r\n         mvn clean package\r\n    The binary will be in target/gpb-stream-reader-writer-{version}.jar\r\n\r\n    Or include the dependency in your maven2 pom.xml:\r\n    <dependency>\r\n      <groupId>com.google.code.google-proto-simple-reader-writer</groupId>\r\n      <artifactId>gpb-stream-reader-writer</artifactId>\r\n      <version>1.5.3</version>\r\n    </dependency>\r\n\r\n(include links for the wiki and demo source and jar location here)\r\n\r\nSummary of encoding, content type and additional configuration needed for data transfer, learned while testing for different browsers:\r\n\r\n|    browsers              | char encoding    | content type   |  AJAX Object                            |\r\n|--------------------------|------------------|----------------|-----------------------------------------|\r\n| Chrome, webkit, mozilla  | UTF-8            | octet-stream   | XMLHttpRequest                          |\r\n|                          |                  |                |                                         |\r\n| IE11                     | UTF-8            | octet-stream   | XMLHttpRequest                          |\r\n|                          |                  |                |                                         |\r\n| IE10                     | UTF-8            | octet-stream   | XDomainRequest                          |\r\n|                          | UTF-8            | text           |                                         |\r\n|                          | windows-1252     | text           |                                         |\r\n|                          |                  |                |                                         |\r\n| IE9                      |                  |                | XDomainRequest or ActiveXObjectRequest  |\r\n|                          | UTF-8            | octet-stream   |                                         |\r\n|                          | windows-1252     | text           |                                         |\r\n|                          |                  |                |                                         |\r\n| IE8(CORS)                | windows-1252     | text           | XDomainRequest                          |\r\n|                          |                  |                |                                         |\r\n| IE6, IE7, E8(local)      | UTF-8            | octet-stream   | ActiveXObjectRequest                    |\r\n|                          | windows-1252     | text           |                                         |\r\n\r\n    note that IE10 needs <meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\" />\r\n\r\n    note that vbscript was necessary to read the data as binary from the \r\n    response body of ActiveXObjectRequest.\r\n\r\n    note that ActiveXObjectRequest is configured to attempt modes \r\n    \"Msxml2.XMLHTTP.6.0\",\"Msxml2.XMLHTTP.4.0\", \"Msxml2.XMLHTTP.3.0\", \r\n    \"Msxml2.XMLHTTP\", \"Microsoft.XMLHTTP\"\r\n\r\n    If using CORS to share data between client and server of different \r\n    domains, IE browsers > IE7 and < IE10 will need to use XDomainRequest \r\n    instead of ActiveXObjectRequest.  The content then has to be text, \r\n    so use encoding windows-1252.\r\n\r\ndid not test on IE6 and IE7 XDomainRequest w/ CORS...\r\n\r\nNote that the cross origin resource sharing (CORS) domain configurations above work for http and https, excepting XDomainRequest which does not allow https from an http origin at this time (though they will hopefully fix the security warning that more secure content may be present instead of removing ability to use https from their XDomainRequest object...).\r\n\r\nThe tests are in testGPB.html.\r\n\r\nNote too that for javascipt clients, you'll want to scrub your text for characters that might break\r\nyour javascript deserialization of the messages.  See the Util.java. Essentially, quotes and line breaks...\r\n>        str = str.replaceAll(\"'\", \"&#39;\");\r\n>        str = str.replaceAll(\"\\\"\", \"&#34;\");\r\n>        str = str.replaceAll(\"\\n\", \"\");\r\n>        str = str.replaceAll(\"\\r\", \"\"); // this shouldn't be necessary","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}