google protocol buffer encoding for start of message and in between is seamlessly recognized as
text encoding by ie active x object:
   10 <== line feed
   #  <== number of bytes in message (if less than 255?)
   1  <== start of heading
   10 <== line feed 

-- add the ajax methods to the gpbmessages reader script
-- add tests to cwyf

extra ajax to active object to keep it from caching?

Active X Object char conversion problem for any data values above 127 because
it was designed to only use content type text/plain (ascii).

server-side I am streaming content that is a 
   Google Protocol Buffer
   and byte markers (unsigned bytes).

Would need to rewrite the gpb messages to stream to accomodate values > 127.
Since most of the message will be ascii, it isn't adding too much to the size of the
message, just the amount of time to do that (and undo on the client side).
For bytes > 127, could write bytes[i]=127 and bytes[i+1]=remainder (which might be zero).
Will reading the value be as straight forward?  yes, should be as all of the methods convert the
string to an array to be read by the google protocol buffer deserialization library...

  Steps:
     byte[] bytes = gpbMessage.toByteArray();
     byte[] unsignedBytes = 

what is GPB's codedinputstream again?  

 reads 255, but should be 169,      <=== 169 is a 
       255  -> 153
       255  -> 200 followed by 1
       255  -> 200 followed by 1
different if & with unsigned range 7f
still have the last byte problem:
    example: expect 93, 24, 201,1 and see in active x 93, 24, 127

  chrome  IE
    16 bit character conversion...   2^8 = 256  2^16   0x10000
