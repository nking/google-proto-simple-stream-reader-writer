
A simple library to read and write Protocol Buffer messages to input and output streams.

The binary delimiters are signed, so can be read with clients that can only parse strings
and not unsigned binary data.

Example write:

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
        throws ServletException, IOException {

        BufferedOutputStream out = null;
        
        try {
                        
            List<YourGoogleProtocolBufferMessages> messages = getGPBMessages(req);

            resp.setContentType("application/octet-stream");
                
            int expectedSize = PBWireByteMarkerHelper.estimateTotalContentLength(messages);
                
            resp.setContentLength(expectedSize);

            out = new BufferedOutputStream(resp.getOutputStream(), 1024);

            PBStreamWriter.writeToStream(out, messages);

        } catch (Throwable t) {

            log.severe(t.getMessage());
 
            t.printStackTrace();

            resp.setStatus(500);

        } finally {

            if (out != null)
                out.close();
        }
    }


Example read from Java client:

   PBStreamReader<YourGoogleProtocolBufferMessages> pbReader = new PBStreamReader();
   Builder builder = EventPB.newBuilder();
   List<YourGoogleProtocolBufferMessages> messages = pbReader.read(inStream, builder);
 
Also see examples in the test directory including one for async messages.

Note, that the project's pom.xml includes a plugin to compile your .proto files, but you need
to have the proto binary installed on your computer.
http://code.google.com/apis/protocolbuffers/
An example of a .proto file and the generated java file is in the test directory of the source code.
http://code.google.com/p/google-proto-simple-stream-reader-writer/source/browse/src/#src%2Ftest%2Fjava%2Fcom%2Fgoogle%2Fcode%2Fproto%2Fmodel

Example read from Javascript client:
   see files in javascript directory
